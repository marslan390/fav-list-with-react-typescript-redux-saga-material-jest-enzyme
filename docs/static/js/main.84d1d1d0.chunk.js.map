{"version":3,"sources":["store/fav-list/types.ts","store/fav-list/reducers.ts","utils/array.ts","store/reducers.ts","utils/api.ts","store/fav-list/actions.ts","store/fav-list/sagas.ts","store/sagas.ts","store/root-state.ts","store/index.ts","components/FavouriteItem.tsx","hooks/pagination.tsx","components/FavouriteList.tsx","utils/index.ts","components/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GET_FAV_LIST","favListInitialState","items","isFetching","isRating","getSortedFavList","prop","sort","a","b","sortDesc","getFavListAfterRate","favItem","_favList","index","findIndex","item","id","combineReducers","favList","state","action","type","payload","getApi","config","async","axios","method","receiveFavList","favItems","receiveFavListError","errors","_getFavList","getFavListSaga","call","url","data","status","put","takeLatest","sagas","all","map","saga","spawn","console","log","store","_sagaMiddleware","sagaMiddleware","middleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","run","configureStore","useStyles","makeStyles","card","borderRadius","FavouriteItem","updateRating","classes","rating","Card","className","CardActionArea","CardContent","Typography","data-testid","gutterBottom","variant","component","name","color","author","Rating","size","value","precision","onChange","event","max","usePagination","pageLimit","React","useState","page","setPage","count","Math","ceil","length","start","end","slice","getPageItems","borderTop","padding","FavouriteList","pagingProps","pageItems","key","Pagination","getRandomFloat","min","decimals","parseFloat","random","toFixed","theme","root","flexGrow","title","container","breakpoints","down","marginTop","up","useFavItemRandomRating","setFavItem","setRating","useEffect","intervalId","randomInterval","setInterval","randomIndex","floor","randomRating","clearInterval","Layout","dispatch","useDispatch","useSelector","btnColor","btnText","_favItem","rateFavItem","toggleRating","AppBar","position","Toolbar","Button","onClick","LinearProgress","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84d1d1d0.chunk.js","sourcesContent":["export interface FavItem {\n  id?: number;\n  name: string;\n  author: string;\n  rating: number;\n}\n\nexport interface FavListState {\n  items: FavItem[];\n  isFetching: boolean;\n  isRating: boolean;\n}\n\nexport const DEFAULT_SORT_PROP = \"rating\";\n\nexport const GET_FAV_LIST = \"GET_FAV_LIST\";\nexport const RECEIVE_FAV_LIST = \"RECEIVE_FAV_LIST\";\nexport const RECEIVE_FAV_LIST_ERROR = \"RECEIVE_FAV_LIST_ERROR\";\nexport const RATE_FAV_ITEM = \"RATE_FAV_ITEM\";\nexport const TOGGLE_RANDOM_FAV_RATING = \"TOGGLE_RANDOM_FAV_RATING\";\n\ninterface GetFavListAction {\n  type: typeof GET_FAV_LIST;\n}\n\ninterface ReceiveFavListAction {\n  type: typeof RECEIVE_FAV_LIST;\n  payload: FavItem[];\n}\n\ninterface ReceiveFavListErrorAction {\n  type: typeof RECEIVE_FAV_LIST_ERROR;\n  payload: FavItem[];\n}\n\ninterface RateFavItemAction {\n  type: typeof RATE_FAV_ITEM;\n  payload: FavItem;\n}\n\ninterface ToggleRandomRatingAction {\n  type: typeof TOGGLE_RANDOM_FAV_RATING;\n}\n\nexport type FavListActions =\n  | GetFavListAction\n  | ReceiveFavListAction\n  | ReceiveFavListErrorAction\n  | RateFavItemAction\n  | ToggleRandomRatingAction;\n","import {\n  DEFAULT_SORT_PROP,\n  FavItem,\n  FavListActions,\n  FavListState,\n  GET_FAV_LIST,\n  RATE_FAV_ITEM,\n  RECEIVE_FAV_LIST,\n  RECEIVE_FAV_LIST_ERROR,\n  TOGGLE_RANDOM_FAV_RATING\n} from \"./types\";\nimport { sortDesc } from \"../../utils/array\";\n\nexport const favListInitialState: FavListState = {\n  items: [],\n  isFetching: false,\n  isRating: false\n};\n\nexport const favListReducer = (\n  state: FavListState = favListInitialState,\n  action: FavListActions\n): FavListState => {\n  switch (action.type) {\n    case GET_FAV_LIST: {\n      return {\n        ...state,\n        isFetching: true\n      };\n    }\n    case RECEIVE_FAV_LIST_ERROR: {\n      return {\n        ...state,\n        isFetching: false\n      };\n    }\n    case RECEIVE_FAV_LIST: {\n      return {\n        ...state,\n        items: getSortedFavList(action.payload),\n        isFetching: false\n      };\n    }\n    case RATE_FAV_ITEM: {\n      return {\n        ...state,\n        items: getFavListAfterRate([...state.items], action.payload)\n      };\n    }\n    case TOGGLE_RANDOM_FAV_RATING: {\n      return {\n        ...state,\n        isRating: !state.isRating\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst getSortedFavList = (items: FavItem[]): FavItem[] => {\n  return sortDesc([...items], DEFAULT_SORT_PROP);\n};\n\nconst getFavListAfterRate = (items: FavItem[], favItem: FavItem): FavItem[] => {\n  const _favList = [...items];\n  const index = items.findIndex(item => item.id === favItem.id);\n  if (index !== -1) {\n    _favList[index] = favItem;\n  }\n  return getSortedFavList(_favList);\n};\n","export const sortDesc = (items: Array<any>, prop: string) =>\n  (items || []).sort((a: any, b: any) =>\n    b[prop] > a[prop] ? 1 : a[prop] > b[prop] ? -1 : 0\n  );\n","import { favListReducer } from \"./fav-list/reducers\";\nimport { combineReducers } from \"redux\";\n\nexport default combineReducers({\n  favList: favListReducer\n});\n","import axios from \"axios\";\n\nexport const getApi = async (config: any) =>\n  await axios({ ...config, method: \"GET\" });\n","import {\n  FavItem,\n  FavListActions,\n  GET_FAV_LIST,\n  RATE_FAV_ITEM,\n  RECEIVE_FAV_LIST,\n  TOGGLE_RANDOM_FAV_RATING\n} from \"./types\";\n\nexport const getFavList = (): FavListActions => ({\n  type: GET_FAV_LIST\n});\n\nexport const receiveFavList = (favItems: FavItem[]): FavListActions => ({\n  type: RECEIVE_FAV_LIST,\n  payload: favItems\n});\n\nexport const receiveFavListError = (errors: any): FavListActions => ({\n  type: RECEIVE_FAV_LIST,\n  payload: errors\n});\n\nexport const rateFavItem = (favItem: FavItem): FavListActions => ({\n  type: RATE_FAV_ITEM,\n  payload: favItem\n});\n\nexport const toggleRandomFavRating = (): FavListActions => ({\n  type: TOGGLE_RANDOM_FAV_RATING\n});\n","import { GET_FAV_LIST } from \"./types\";\nimport { getApi } from \"../../utils/api\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { receiveFavList, receiveFavListError } from \"./actions\";\n\nfunction* _getFavList() {\n  const { data, status } = yield call(getApi, {\n    url: \"/data/fav-list.json\"\n  });\n  status === 200\n    ? yield put(receiveFavList(data))\n    : yield put(receiveFavListError({}));\n}\n\nexport function* getFavListSaga() {\n  yield takeLatest(GET_FAV_LIST, _getFavList);\n}\n","import { all, spawn, call } from \"redux-saga/effects\";\nimport { getFavListSaga } from \"./fav-list/sagas\";\n\nexport default function* sagas() {\n  const sagas = [getFavListSaga];\n\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      })\n    )\n  );\n}\n","import { DefaultRootState } from \"react-redux\";\nimport { favListInitialState } from \"./fav-list/reducers\";\nimport { FavListState } from \"./fav-list/types\";\n\nexport interface AppState extends DefaultRootState {\n  favList: FavListState;\n}\n\nexport default (): AppState => ({\n  favList: favListInitialState\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport sagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducers\";\nimport sagas from \"./sagas\";\nimport initDefaultRootState from \"./root-state\";\n\nconst configureStore = (state: any) => {\n  const _sagaMiddleware = sagaMiddleware();\n  const middleware = [_sagaMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middleware);\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = composeWithDevTools(...enhancers);\n  const store = createStore(rootReducer, state, composedEnhancers);\n  _sagaMiddleware.run(sagas);\n  return store;\n};\nconst initialState = initDefaultRootState();\nconst store = configureStore(initialState);\nexport default store;\n","import React from \"react\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FavItem } from \"../store/fav-list/types\";\n\nconst useStyles = makeStyles({\n  card: {\n    borderRadius: 0\n  }\n});\n\ninterface FavouriteItemProps {\n  item: FavItem;\n  updateRating: (favItem: FavItem, rating: number) => void;\n}\n\nconst FavouriteItem: React.FC<FavouriteItemProps> = ({\n  item,\n  updateRating\n}) => {\n  const classes = useStyles();\n\n  const onChangeRating = (event: any, rating: number | null) => {\n    if (rating) {\n      const favItem = { ...item };\n      updateRating(favItem, rating);\n    }\n  };\n\n  return item.rating > 0 && item.rating <= 5 ? (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardContent>\n          <Typography\n            data-testid=\"name\"\n            gutterBottom\n            variant=\"h5\"\n            component=\"h2\"\n          >\n            {item.name}\n          </Typography>\n          <Typography\n            data-testid=\"author\"\n            gutterBottom\n            variant=\"body2\"\n            color=\"textSecondary\"\n            component=\"p\"\n          >\n            {item.author}\n          </Typography>\n          <Typography component=\"p\">\n            <Rating\n              name={`rating${item.id}`}\n              size=\"large\"\n              value={item.rating}\n              precision={0.5}\n              onChange={onChangeRating}\n              max={5}\n            />\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  ) : (\n    <span data-testid=\"invalidRating\">Invalid Rating</span>\n  );\n};\nexport default FavouriteItem;\n","import React from \"react\";\n\nconst usePagination = (items: Array<any>, pageLimit: number): [any, any] => {\n  const [page, setPage] = React.useState(1);\n  const handleChange = (event: any, value: number) => setPage(value);\n  const getPageItems = () => {\n    const start = (page - 1) * pageLimit;\n    const end = start + pageLimit;\n    return items.slice(start, end);\n  };\n  return [\n    {\n      count: Math.ceil(items.length / pageLimit),\n      page: page,\n      onChange: handleChange\n    },\n    getPageItems()\n  ];\n};\nexport default usePagination;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FavouriteItem from \"./FavouriteItem\";\nimport { FavItem } from \"../store/fav-list/types\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport Card from \"@material-ui/core/Card\";\nimport usePagination from \"../hooks/pagination\";\n\nconst useStyles = makeStyles({\n  card: {\n    borderRadius: 0,\n    borderTop: \"1px solid #f0f0f0\",\n    padding: \"5px 0\"\n  }\n});\n\ninterface FavouriteListProps {\n  items: FavItem[];\n  isRating: boolean;\n  toggleRating: () => void;\n  updateRating: (favItem: FavItem, rating: number) => void;\n}\n\nconst FavouriteList: React.FC<FavouriteListProps> = ({\n  items,\n  updateRating\n}) => {\n  const classes = useStyles();\n  const [pagingProps, pageItems] = usePagination(items, 5);\n  return items.length > 0 ? (\n    <>\n      {pageItems.map((favItem: FavItem) => (\n        <FavouriteItem\n          key={favItem.id}\n          item={favItem}\n          updateRating={updateRating}\n        />\n      ))}\n      <Card className={classes.card}>\n        <Pagination {...pagingProps}/>\n      </Card>\n    </>\n  ) : (\n    <span data-testid=\"notFound\">No item found</span>\n  );\n};\n\nexport default FavouriteList;\n","export const getRandomFloat = (\n  min: number,\n  max: number,\n  decimals: number = 2\n): number => parseFloat((Math.random() * (max - min) + min).toFixed(decimals));\n\nexport const getRandomInt = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FavouriteList from \"./FavouriteList\";\nimport {\n  getFavList,\n  rateFavItem,\n  toggleRandomFavRating\n} from \"../store/fav-list/actions\";\nimport { AppState } from \"../store/root-state\";\nimport { getRandomFloat, getRandomInt } from \"../utils\";\nimport { FavItem } from \"../store/fav-list/types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Container from '@material-ui/core/Container';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  container: {\n    [theme.breakpoints.down('sm')]: {\n      marginTop: '52px'\n    },\n    [theme.breakpoints.up('sm')]: {\n      marginTop: '68px'\n    }\n  }\n}));\n\nconst Layout = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { items, isRating, isFetching } = useSelector((state: AppState) => state.favList);\n  const [favItem, rating] = useFavItemRandomRating(items, isRating);\n  const btnColor = isRating ? \"secondary\" : \"default\";\n  const btnText = isRating ? \"Stop Random Rating\" : \"Start Random Rating\";\n  // cDM\n  useEffect(() => {\n    dispatch(getFavList());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    updateRating(favItem, rating);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [favItem, rating]);\n\n  const updateRating = (favItem: FavItem, rating: number): void => {\n    const _favItem = { ...favItem };\n    _favItem.rating = rating;\n    dispatch(rateFavItem(_favItem));\n  };\n\n  const toggleRating = (): void => {\n    dispatch(toggleRandomFavRating());\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Favourite List\n          </Typography>\n          <Button\n            data-testid=\"btnStartRating\"\n            variant=\"contained\"\n            color={btnColor}\n            onClick={toggleRating}\n          >\n            {btnText}\n          </Button>\n        </Toolbar>\n        {isFetching && <LinearProgress color=\"secondary\" />}\n      </AppBar>\n      <Container className={classes.container}>\n        <FavouriteList\n        items={[...items]}\n        toggleRating={toggleRating}\n        updateRating={updateRating}\n        isRating={isRating}\n      />\n      </Container>\n    </div>\n  );\n};\n\nconst useFavItemRandomRating = (items: FavItem[], isRating: boolean) => {\n  let [favItem, setFavItem] = useState();\n  let [rating, setRating] = useState();\n\n  useEffect(() => {\n    let intervalId: any = null;\n    if (isRating) {\n      const randomInterval = getRandomFloat(0, 1) * 1000;\n      intervalId = setInterval(() => {\n        const randomIndex = getRandomInt(0, items.length - 1);\n        const randomRating = getRandomFloat(0, 5);\n        setFavItem({ ...items[randomIndex] });\n        setRating(randomRating);\n      }, randomInterval);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isRating]);\n  return [favItem, rating];\n};\nexport default Layout;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Layout from \"./components/Layout\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Layout />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}